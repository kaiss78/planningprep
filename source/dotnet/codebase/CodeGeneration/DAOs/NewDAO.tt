<#@ include file="../Globals/GlobalSettings.tt" #>
<#
	
	bool IsTableLevelAuditEntity = false;

	InitDB();
#>
#region File Info/History
/*
 * --------------------------------------------------------------------------------
 * Project Name: <#= ProjectName #>
 * Module: App.Data
 * Name: <#= FormattedBaseTableName #>DAO.cs
 * Purpose: DAO Class to get/set the data from <#= TableName #> table.
 * 
 * Author: <#= AuthorName #>
 * Language: C# SDK version 3.5
 * --------------------------------------------------------------------------------
 * Change History:
 * Product					Date					Comments
 * [Developer Name]		<#= DateTime.Now #>		Initial Development
 * -------------------------------------------------------------------------------- 
 */
#endregion

using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Data;
using App.Models.Enums;
using App.Core;
using App.Core.DB;
using App.Core.Exceptions;
using App.Core.Factories;
using System.Security.Principal;

namespace <#= string.Format("{0}", DefaultNamespace) #> 
{
	public interface I<#= FormattedBaseTableName #>DAO : IDataAccess<<#= ModelNamespace #>.<#= FormattedBaseTableName #>>
    {
    }
    
    public class <#= FormattedBaseTableName #>DAO : BaseDataAccess<<#= ModelNamespace #>.<#= FormattedBaseTableName #>>, I<#= FormattedBaseTableName #>DAO
    {
        #region Constructor
        public <#= FormattedBaseTableName #>DAO()
        {
        }

        public <#= FormattedBaseTableName #>DAO(string connectionString)
            : base(connectionString)
        {
        }
        #endregion

        #region Helper Methods
        protected override <#= ModelNamespace #>.<#= FormattedBaseTableName #> Map(IDataReader reader)
        {
            <#= ModelNamespace #>.<#= FormattedBaseTableName #> entity = EntityFactory.Create<<#= ModelNamespace #>.<#= FormattedBaseTableName #>>();

    <# 
	foreach( Column column in Base_Table.Columns )
	{
		string columnType = column.DataType.Name;
		string dataTypeName = GetDataType(columnType);
		
		if(dataTypeName.ToUpper() == "BOOL")
		{
			dataTypeName = "boolean";
		}
	#>
		entity.<#= column.Name #> = NullHandler.Get<#= char.ToUpper(dataTypeName[0]) + dataTypeName.Substring(1) #>(reader["<#= column.Name #>"]);
    <#	
	} 
	#>     
            return entity;
        }

        protected override void EagerLoad(<#= ModelNamespace #>.<#= FormattedBaseTableName #> entity)
        {
            // Add eager loading functionality here
        }
        #endregion
    }
}
<#+
public void CreateSetParameters(string entityName)
{
	WriteLine(@"AppParameter[] parameters = new[] {");
	PushIndent("\t");
	PushIndent("\t");
	PushIndent("\t");
	PushIndent("\t");
	PushIndent("\t");
	PushIndent("\t");
	PushIndent("\t");
	PushIndent("\t");
	PushIndent("\t");
	PushIndent("\t");
	PushIndent("\t");
	PushIndent("\t");
	PushIndent("\t");

	foreach( Column column in SQLCollection)
	{
		string dataTypeName = GetDataType(column.DataType.Name);
		switch( GetDataType(column.DataType.Name).ToUpper() )
		{
			case "BOOLEAN":
			case "BOOL":
				WriteLine(@"new AppParameter(""{0}"", DbType.Boolean, {1}.{0}),", column.Name, entityName);
				break;
			case "DATETIME":
		    case "SMALLDATETIME":
				WriteLine(@"new AppParameter(""{0}"", DbType.DateTime, {1}.{0}),", column.Name, entityName);
				break;
			case "VARCHAR":
		    case "NVARCHAR":
		    case "STRING":
		    case "CHAR":
		    case "TEXT":
				WriteLine(@"new AppParameter(""{0}"", DbType.String, {1}.{0}),", column.Name, entityName);
				break;
			case "DOUBLE":
				WriteLine(@"new AppParameter(""{0}"", DbType.Float, {1}.{0}),", column.Name, entityName);
				break;
			case "DECIMAL":
				WriteLine(@"new AppParameter(""{0}"", DbType.Decimal, {1}.{0}),", column.Name, entityName);
				break;
			case "BIGINT":
			case "NUMERIC":
				WriteLine(@"new AppParameter(""{0}"", DbType.Int64, {1}.{0}),", column.Name, entityName);
				break;
			case "SMALLINT":
			case "INT":
				WriteLine(@"new AppParameter(""{0}"", DbType.Int32, {1}.{0}),", column.Name, entityName);
				break;
			case "VARBINARY":
			case "IMAGE":
				WriteLine(@"new AppParameter(""{0}"", DbType.Binary, {1}.{0}),", column.Name, entityName);
				break;
			default:
				WriteLine(@"new AppParameter(""{0}"", DbType.String, {1}.{0}),", column.Name, entityName);
				break;
		}
	}
	PopIndent();
	WriteLine("};");
	PopIndent();
	PopIndent();
	PopIndent();
	PopIndent();
	PopIndent();
	PopIndent();
	PopIndent();
	PopIndent();
	PopIndent();
	PopIndent();
	PopIndent();
}	
#>