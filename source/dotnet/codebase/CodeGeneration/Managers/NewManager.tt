<#@ include file="../Globals/GlobalSettings.tt" #>
<#	
TableName ="Users";
AuthorName="Jason Duffus";

string ManagerNamespace = "OPUS.Domain.Users";
string ModelNamespace = "OPUS.Models.Users";
string BaseTypeName = ""; 

InitDB();
ClassComments(FormattedBaseTableName);
WriteLine("");
WriteLine("using System;");
WriteLine("using System.Collections;");
WriteLine("using Pantheon.Core;");
WriteLine("using Pantheon.Core.Base.Model;");
WriteLine("using Pantheon.Core.Base.Managers;");
WriteLine("using Pantheon.Core.Base.Managers.Responses;");
WriteLine("using OPUS.Models.Base;");
WriteLine("");
WriteLine("namespace {0}", ManagerNamespace);
WriteLine("{");
PushIndent("\t");
WriteLine("public interface I{1}Manager : IManagerBase<{0}.{1}>", ModelNamespace, FormattedBaseTableName);
WriteLine("{}");
WriteLine("");
WriteLine("public class {1}Manager : ManagerBase<{0}.{1}>, I{1}Manager", ModelNamespace, FormattedBaseTableName);
WriteLine("{");
PushIndent("\t");
// Constructors
WriteLine("public {0}Manager()", FormattedBaseTableName);
WriteLine("{}");
WriteLine("");
// CRUD Methods
WriteLine("#region CRUD Methods");
WriteLine("public override SaveOrUpdateResponse SaveOrUpdate({0}.{1} entity)", ModelNamespace, FormattedBaseTableName);
WriteLine("{");  
PushIndent("\t");  
WriteLine("throw new NotImplementedException();"); 
PopIndent(); 
WriteLine("}");  
WriteLine("");  

WriteLine("public override SingleResponse Get(long id)");
WriteLine("{");  
PushIndent("\t");  
WriteLine("throw new NotImplementedException();"); 
PopIndent(); 
WriteLine("}");  
WriteLine("");  

WriteLine("public override ListResponse GetList()");
WriteLine("{");  
PushIndent("\t");  
WriteLine("throw new NotImplementedException();"); 
PopIndent(); 
WriteLine("}");  
WriteLine(""); 

WriteLine("public override ConditionalResponse Delete({0}.{1} entity)", ModelNamespace, FormattedBaseTableName);
WriteLine("{");  
PushIndent("\t");  
WriteLine("throw new NotImplementedException();"); 
PopIndent(); 
WriteLine("}");  
WriteLine("#endregion");  
PopIndent(); 
WriteLine("}");  
PopIndent();
WriteLine("}");
#>
<#+	
public void CreatePropertiesFromCollections(List<Column> tabCollections )
{
	foreach( Column col in tabCollections )
	{
		if( !AuditCreateCollection.Contains(col.Name) )
		{
			PopIndent();
			PopIndent();
			PushIndent("\t");
			PushIndent("\t");
			CreateProperty(col);
		}
	}  
}			 
public void CreateBaseProperties(Table prmTable)
{
	foreach( Column col in prmTable.Columns )
	{
		PopIndent();
		PopIndent();
		PushIndent("\t");
		PushIndent("\t");
		if( !AuditCreateCollection.Contains(col.DataType.Name) )
		{
			CreateProperty(col);
		}
	}  
}

public void CreateAuditProperties(Table prmTable)
{
	foreach( Column col in prmTable.Columns )
	{
		PopIndent();
		PopIndent();
		PushIndent("\t\t");
		if( !AuditCreateCollection.Contains(col.DataType.Name) )
		{
			CreateProperty(col);
		}
	}  
}
public void CreateProperty( Column col )
{
		//switch(  GetDataType(col.DataType.Name).toUpper() )
		//{
			//case "DATE":
			//	NullableProperty(col);
			//	break;
			//default:
				simpleProperty(col);
			//break;
		//}
}
public void simpleProperty(Column col)
{
	WriteLine("");
	WriteLine("/// <summary>");
	WriteLine("/// Gets or sets the {0}",col.Name);
	WriteLine("/// </summary>");
	WriteLine("/// <value>The {0}.</value>",col.Name);
	WriteLine("public {1} {0}",col.Name,GetDataType(col.DataType.Name.ToUpper()));
	WriteLine("{");
	PushIndent("\t");
	SimpleGet(col);
	SimpleSet(col);
	PopIndent();
	WriteLine("}");
}
 #>