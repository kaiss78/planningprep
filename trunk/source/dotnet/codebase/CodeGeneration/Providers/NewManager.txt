


#region File Info/History
/*
 * =============================================
 * Project Name: [Project Name]
 * Assembly:	   [Assembly Name]
 * Name:		Product
 * Purpose: Product entity class 
 * Language: C# SDK version 3.5
 * Change History
 * =============================================
 * AFS	3/5/2010 12:49:01 AM		Initial Code
 * =============================================
 */
#endregion

using System;
using System.Collections;
using App.Core;
using App.Core.Base.Model;
using App.Core.Base.Managers;
using App.Core.Base.Managers.Responses;
using App.Models.Base;
using App.Data.Products;
using App.Models.Products;
using System.Collections.Generic;
using System.Transactions;
using App.Data;
using App.Core.Exceptions;

namespace App.Domain.Products
{
	public interface IProductManager : IManagerBase<App.Models.Products.Product>
	{}

	public class ProductManager : ManagerBase<App.Models.Products.Product>, IProductManager
	{
		public ProductManager()
		{}

		#region CRUD Methods
		/// <summary>
		/// Saves or Updates the entity in the database
		/// </summary>
		/// <param name="entity"></param>
		public override void SaveOrUpdate(App.Models.Products.Product entity)
		{
			using (new TimedTraceLog(GetType().Name + "SaveOrUpdate(Product)", ""))
			{
				try
				{
					using (TransactionScope scope = new TransactionScope(TransactionScopeOption.Required, TimeSpan.FromSeconds(60)))
					{
						using (IProductDAO dao = (IProductDAO)DAOFactory.Get<Product>())
						{
							dao.Save(entity);
						}
						scope.Complete();
					}
				}
				catch (Exception ex)
				{
					ExceptionHelper.HandleException<ManagerException>(ex, "ProductDAO.SaveOrUpdate(Product)");
				}
			}
		}

		/// <summary>
		/// Gets the object with specified id.
		/// </summary>
		/// <param name="id">The id.</param>
		/// <returns></returns>
		public override Product Get(long id)
		{
			Product Product = null;
			try
			{
				using (IProductDAO dao = (IProductDAO)DAOFactory.Get<Product>())
				{
					Product = dao.Get(id, true);
				}
			}
			catch (Exception ex)
			{
				ExceptionHelper.HandleException<ManagerException>(ex);
			}
			return Product;
		}

		/// <summary>
		/// Gets the object with the specified id.
		/// </summary>
		/// <param name="id">The id.</param>
		/// <param name="eagerLoad">if set to <c>true</c> [eager load].</param>
		/// <returns></returns>
		public override Product Get(long id, bool eagerLoad)
		{
			Product Product = null;
			try
			{
				using (IProductDAO dao = (IProductDAO)DAOFactory.Get<Product>())
				{
					Product = dao.Get(id, eagerLoad);
				}
			}
			catch (Exception ex)
			{
				ExceptionHelper.HandleException<ManagerException>(ex);
			}
			return Product;
		}

		/// <summary>
		/// Gets the list.
		/// </summary>
		/// <returns></returns>
		public override IEnumerable<Product> GetList()
		{
			IEnumerable<Product> ProductList = new List<Product>();
			try
			{
				using (IProductDAO dao = (IProductDAO)DAOFactory.Get<Product>())
				{
					ProductList = dao.GetAll(u => u.Active && !u.Deleted);
				}
			}
			catch (Exception ex)
			{
				ExceptionHelper.HandleException<ManagerException>(ex);
			}
			return ProductList;
		}

		/// <summary>
		/// Deletes the specified entity.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <returns></returns>
		public override bool Delete(App.Models.Products.Product entity)
		{
			bool result = false;
			try
			{
				using (IProductDAO dao = (IProductDAO)DAOFactory.Get<Product>())
				{
					result = dao.Delete(entity);
				}
			}
			catch (Exception ex)
			{
				ExceptionHelper.HandleException<ManagerException>(ex);
			}
			return result;
		}
		#endregion
	}
}
