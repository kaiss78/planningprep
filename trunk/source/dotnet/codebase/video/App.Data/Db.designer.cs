#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace App.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="OnlineVideo1")]
	public partial class DbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSerialKey(SerialKey instance);
    partial void UpdateSerialKey(SerialKey instance);
    partial void DeleteSerialKey(SerialKey instance);
    partial void InsertFileTracking(FileTracking instance);
    partial void UpdateFileTracking(FileTracking instance);
    partial void DeleteFileTracking(FileTracking instance);
    partial void InsertFileCategory(FileCategory instance);
    partial void UpdateFileCategory(FileCategory instance);
    partial void DeleteFileCategory(FileCategory instance);
    partial void InsertSiteUser(SiteUser instance);
    partial void UpdateSiteUser(SiteUser instance);
    partial void DeleteSiteUser(SiteUser instance);
    partial void InsertContentFile(ContentFile instance);
    partial void UpdateContentFile(ContentFile instance);
    partial void DeleteContentFile(ContentFile instance);
    #endregion
		
		public DbDataContext() : 
				base(global::App.Data.Properties.Settings.Default.OnlineVideo1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SerialKey> SerialKeys
		{
			get
			{
				return this.GetTable<SerialKey>();
			}
		}
		
		public System.Data.Linq.Table<FileTracking> FileTrackings
		{
			get
			{
				return this.GetTable<FileTracking>();
			}
		}
		
		public System.Data.Linq.Table<FileCategory> FileCategories
		{
			get
			{
				return this.GetTable<FileCategory>();
			}
		}
		
		public System.Data.Linq.Table<SiteUser> SiteUsers
		{
			get
			{
				return this.GetTable<SiteUser>();
			}
		}
		
		public System.Data.Linq.Table<ContentFile> ContentFiles
		{
			get
			{
				return this.GetTable<ContentFile>();
			}
		}
	}
	
	[Table(Name="dbo.SerialKey")]
	public partial class SerialKey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Key;
		
		private System.DateTime _Created;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
		
		public SerialKey()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Name="[Key]", Storage="_Key", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FileTracking")]
	public partial class FileTracking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _FileID;
		
		private System.Nullable<bool> _IsViewed;
		
		private System.Nullable<bool> _IsDownloaded;
		
		private long _UserID;
		
		private string _UserIP;
		
		private System.DateTime _Created;
		
		private EntityRef<SiteUser> _SiteUser;
		
		private EntityRef<ContentFile> _ContentFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnFileIDChanging(long value);
    partial void OnFileIDChanged();
    partial void OnIsViewedChanging(System.Nullable<bool> value);
    partial void OnIsViewedChanged();
    partial void OnIsDownloadedChanging(System.Nullable<bool> value);
    partial void OnIsDownloadedChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnUserIPChanging(string value);
    partial void OnUserIPChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
		
		public FileTracking()
		{
			this._SiteUser = default(EntityRef<SiteUser>);
			this._ContentFile = default(EntityRef<ContentFile>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileID", DbType="BigInt NOT NULL")]
		public long FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					if (this._ContentFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsViewed", DbType="Bit")]
		public System.Nullable<bool> IsViewed
		{
			get
			{
				return this._IsViewed;
			}
			set
			{
				if ((this._IsViewed != value))
				{
					this.OnIsViewedChanging(value);
					this.SendPropertyChanging();
					this._IsViewed = value;
					this.SendPropertyChanged("IsViewed");
					this.OnIsViewedChanged();
				}
			}
		}
		
		[Column(Storage="_IsDownloaded", DbType="Bit")]
		public System.Nullable<bool> IsDownloaded
		{
			get
			{
				return this._IsDownloaded;
			}
			set
			{
				if ((this._IsDownloaded != value))
				{
					this.OnIsDownloadedChanging(value);
					this.SendPropertyChanging();
					this._IsDownloaded = value;
					this.SendPropertyChanged("IsDownloaded");
					this.OnIsDownloadedChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._SiteUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserIP", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserIP
		{
			get
			{
				return this._UserIP;
			}
			set
			{
				if ((this._UserIP != value))
				{
					this.OnUserIPChanging(value);
					this.SendPropertyChanging();
					this._UserIP = value;
					this.SendPropertyChanged("UserIP");
					this.OnUserIPChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Association(Name="SiteUser_FileTracking", Storage="_SiteUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public SiteUser SiteUser
		{
			get
			{
				return this._SiteUser.Entity;
			}
			set
			{
				SiteUser previousValue = this._SiteUser.Entity;
				if (((previousValue != value) 
							|| (this._SiteUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SiteUser.Entity = null;
						previousValue.FileTrackings.Remove(this);
					}
					this._SiteUser.Entity = value;
					if ((value != null))
					{
						value.FileTrackings.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("SiteUser");
				}
			}
		}
		
		[Association(Name="ContentFile_FileTracking", Storage="_ContentFile", ThisKey="FileID", OtherKey="FileID", IsForeignKey=true)]
		public ContentFile ContentFile
		{
			get
			{
				return this._ContentFile.Entity;
			}
			set
			{
				ContentFile previousValue = this._ContentFile.Entity;
				if (((previousValue != value) 
							|| (this._ContentFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentFile.Entity = null;
						previousValue.FileTrackings.Remove(this);
					}
					this._ContentFile.Entity = value;
					if ((value != null))
					{
						value.FileTrackings.Add(this);
						this._FileID = value.FileID;
					}
					else
					{
						this._FileID = default(long);
					}
					this.SendPropertyChanged("ContentFile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FileCategory")]
	public partial class FileCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _CategoryName;
		
		private EntitySet<ContentFile> _ContentFiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public FileCategory()
		{
			this._ContentFiles = new EntitySet<ContentFile>(new Action<ContentFile>(this.attach_ContentFiles), new Action<ContentFile>(this.detach_ContentFiles));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="VarChar(255)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[Association(Name="FileCategory_ContentFile", Storage="_ContentFiles", ThisKey="ID", OtherKey="FileCategoryID")]
		public EntitySet<ContentFile> ContentFiles
		{
			get
			{
				return this._ContentFiles;
			}
			set
			{
				this._ContentFiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContentFiles(ContentFile entity)
		{
			this.SendPropertyChanging();
			entity.FileCategory = this;
		}
		
		private void detach_ContentFiles(ContentFile entity)
		{
			this.SendPropertyChanging();
			entity.FileCategory = null;
		}
	}
	
	[Table(Name="dbo.[User]")]
	public partial class SiteUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserID;
		
		private string _SerialKey;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _Password;
		
		private string _Email;
		
		private bool _IsResident;
		
		private System.Nullable<int> _ResidencyYear;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _LastLoggedIn;
		
		private System.DateTime _Modified;
		
		private bool _IsActive;
		
		private string _ActivationKey;
		
		private EntitySet<FileTracking> _FileTrackings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnSerialKeyChanging(string value);
    partial void OnSerialKeyChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIsResidentChanging(bool value);
    partial void OnIsResidentChanged();
    partial void OnResidencyYearChanging(System.Nullable<int> value);
    partial void OnResidencyYearChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastLoggedInChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoggedInChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnActivationKeyChanging(string value);
    partial void OnActivationKeyChanged();
    #endregion
		
		public SiteUser()
		{
			this._FileTrackings = new EntitySet<FileTracking>(new Action<FileTracking>(this.attach_FileTrackings), new Action<FileTracking>(this.detach_FileTrackings));
			OnCreated();
		}
		
		[Column(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_SerialKey", DbType="VarChar(255)")]
		public string SerialKey
		{
			get
			{
				return this._SerialKey;
			}
			set
			{
				if ((this._SerialKey != value))
				{
					this.OnSerialKeyChanging(value);
					this.SendPropertyChanging();
					this._SerialKey = value;
					this.SendPropertyChanged("SerialKey");
					this.OnSerialKeyChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="VarChar(255)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(255)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_IsResident", DbType="Bit NOT NULL")]
		public bool IsResident
		{
			get
			{
				return this._IsResident;
			}
			set
			{
				if ((this._IsResident != value))
				{
					this.OnIsResidentChanging(value);
					this.SendPropertyChanging();
					this._IsResident = value;
					this.SendPropertyChanged("IsResident");
					this.OnIsResidentChanged();
				}
			}
		}
		
		[Column(Storage="_ResidencyYear", DbType="Int")]
		public System.Nullable<int> ResidencyYear
		{
			get
			{
				return this._ResidencyYear;
			}
			set
			{
				if ((this._ResidencyYear != value))
				{
					this.OnResidencyYearChanging(value);
					this.SendPropertyChanging();
					this._ResidencyYear = value;
					this.SendPropertyChanged("ResidencyYear");
					this.OnResidencyYearChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_LastLoggedIn", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLoggedIn
		{
			get
			{
				return this._LastLoggedIn;
			}
			set
			{
				if ((this._LastLoggedIn != value))
				{
					this.OnLastLoggedInChanging(value);
					this.SendPropertyChanging();
					this._LastLoggedIn = value;
					this.SendPropertyChanged("LastLoggedIn");
					this.OnLastLoggedInChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_ActivationKey", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ActivationKey
		{
			get
			{
				return this._ActivationKey;
			}
			set
			{
				if ((this._ActivationKey != value))
				{
					this.OnActivationKeyChanging(value);
					this.SendPropertyChanging();
					this._ActivationKey = value;
					this.SendPropertyChanged("ActivationKey");
					this.OnActivationKeyChanged();
				}
			}
		}
		
		[Association(Name="SiteUser_FileTracking", Storage="_FileTrackings", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<FileTracking> FileTrackings
		{
			get
			{
				return this._FileTrackings;
			}
			set
			{
				this._FileTrackings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FileTrackings(FileTracking entity)
		{
			this.SendPropertyChanging();
			entity.SiteUser = this;
		}
		
		private void detach_FileTrackings(FileTracking entity)
		{
			this.SendPropertyChanging();
			entity.SiteUser = null;
		}
	}
	
	[Table(Name="dbo.ContentFile")]
	public partial class ContentFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _FileID;
		
		private int _FileCategoryID;
		
		private string _FileName;
		
		private System.Nullable<long> _VideoLength;
		
		private string _UploadedBy;
		
		private System.DateTime _UploadedOn;
		
		private System.DateTime _Modified;
		
		private EntitySet<FileTracking> _FileTrackings;
		
		private EntityRef<FileCategory> _FileCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileIDChanging(long value);
    partial void OnFileIDChanged();
    partial void OnFileCategoryIDChanging(int value);
    partial void OnFileCategoryIDChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnVideoLengthChanging(System.Nullable<long> value);
    partial void OnVideoLengthChanged();
    partial void OnUploadedByChanging(string value);
    partial void OnUploadedByChanged();
    partial void OnUploadedOnChanging(System.DateTime value);
    partial void OnUploadedOnChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    #endregion
		
		public ContentFile()
		{
			this._FileTrackings = new EntitySet<FileTracking>(new Action<FileTracking>(this.attach_FileTrackings), new Action<FileTracking>(this.detach_FileTrackings));
			this._FileCategory = default(EntityRef<FileCategory>);
			OnCreated();
		}
		
		[Column(Storage="_FileID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileCategoryID", DbType="Int NOT NULL")]
		public int FileCategoryID
		{
			get
			{
				return this._FileCategoryID;
			}
			set
			{
				if ((this._FileCategoryID != value))
				{
					if (this._FileCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._FileCategoryID = value;
					this.SendPropertyChanged("FileCategoryID");
					this.OnFileCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="VarChar(255)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_VideoLength", DbType="BigInt")]
		public System.Nullable<long> VideoLength
		{
			get
			{
				return this._VideoLength;
			}
			set
			{
				if ((this._VideoLength != value))
				{
					this.OnVideoLengthChanging(value);
					this.SendPropertyChanging();
					this._VideoLength = value;
					this.SendPropertyChanged("VideoLength");
					this.OnVideoLengthChanged();
				}
			}
		}
		
		[Column(Storage="_UploadedBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UploadedBy
		{
			get
			{
				return this._UploadedBy;
			}
			set
			{
				if ((this._UploadedBy != value))
				{
					this.OnUploadedByChanging(value);
					this.SendPropertyChanging();
					this._UploadedBy = value;
					this.SendPropertyChanged("UploadedBy");
					this.OnUploadedByChanged();
				}
			}
		}
		
		[Column(Storage="_UploadedOn", DbType="DateTime NOT NULL")]
		public System.DateTime UploadedOn
		{
			get
			{
				return this._UploadedOn;
			}
			set
			{
				if ((this._UploadedOn != value))
				{
					this.OnUploadedOnChanging(value);
					this.SendPropertyChanging();
					this._UploadedOn = value;
					this.SendPropertyChanged("UploadedOn");
					this.OnUploadedOnChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Association(Name="ContentFile_FileTracking", Storage="_FileTrackings", ThisKey="FileID", OtherKey="FileID")]
		public EntitySet<FileTracking> FileTrackings
		{
			get
			{
				return this._FileTrackings;
			}
			set
			{
				this._FileTrackings.Assign(value);
			}
		}
		
		[Association(Name="FileCategory_ContentFile", Storage="_FileCategory", ThisKey="FileCategoryID", OtherKey="ID", IsForeignKey=true)]
		public FileCategory FileCategory
		{
			get
			{
				return this._FileCategory.Entity;
			}
			set
			{
				FileCategory previousValue = this._FileCategory.Entity;
				if (((previousValue != value) 
							|| (this._FileCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileCategory.Entity = null;
						previousValue.ContentFiles.Remove(this);
					}
					this._FileCategory.Entity = value;
					if ((value != null))
					{
						value.ContentFiles.Add(this);
						this._FileCategoryID = value.ID;
					}
					else
					{
						this._FileCategoryID = default(int);
					}
					this.SendPropertyChanged("FileCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FileTrackings(FileTracking entity)
		{
			this.SendPropertyChanging();
			entity.ContentFile = this;
		}
		
		private void detach_FileTrackings(FileTracking entity)
		{
			this.SendPropertyChanging();
			entity.ContentFile = null;
		}
	}
}
#pragma warning restore 1591
