#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace App.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="OnlineVideo")]
	public partial class DbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertChapterDefinitionFile(ChapterDefinitionFile instance);
    partial void UpdateChapterDefinitionFile(ChapterDefinitionFile instance);
    partial void DeleteChapterDefinitionFile(ChapterDefinitionFile instance);
    partial void InsertSiteUser(SiteUser instance);
    partial void UpdateSiteUser(SiteUser instance);
    partial void DeleteSiteUser(SiteUser instance);
    #endregion
		
		public DbDataContext() : 
				base(global::App.Data.Properties.Settings.Default.OnlineVideoConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ChapterDefinitionFile> ChapterDefinitionFiles
		{
			get
			{
				return this.GetTable<ChapterDefinitionFile>();
			}
		}
		
		public System.Data.Linq.Table<SiteUser> SiteUsers
		{
			get
			{
				return this.GetTable<SiteUser>();
			}
		}
	}
	
	[Table(Name="dbo.ChapterDefinitionFile")]
	public partial class ChapterDefinitionFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FileName;
		
		private System.Nullable<System.DateTime> _CreationTime;
		
		private System.Nullable<System.DateTime> _ModificationTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnCreationTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreationTimeChanged();
    partial void OnModificationTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnModificationTimeChanged();
    #endregion
		
		public ChapterDefinitionFile()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="VarChar(255)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreationTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ModificationTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModificationTime
		{
			get
			{
				return this._ModificationTime;
			}
			set
			{
				if ((this._ModificationTime != value))
				{
					this.OnModificationTimeChanging(value);
					this.SendPropertyChanging();
					this._ModificationTime = value;
					this.SendPropertyChanged("ModificationTime");
					this.OnModificationTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[User]")]
	public partial class SiteUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserID;
		
		private string _SerialKey;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _Password;
		
		private string _Email;
		
		private bool _IsResident;
		
		private System.Nullable<int> _ResidencyYear;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _LastLoggedIn;
		
		private System.DateTime _Modified;
		
		private bool _IsActive;
		
		private string _ActivationKey;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnSerialKeyChanging(string value);
    partial void OnSerialKeyChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIsResidentChanging(bool value);
    partial void OnIsResidentChanged();
    partial void OnResidencyYearChanging(System.Nullable<int> value);
    partial void OnResidencyYearChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastLoggedInChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoggedInChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnActivationKeyChanging(string value);
    partial void OnActivationKeyChanged();
    #endregion
		
		public SiteUser()
		{
			OnCreated();
		}
		
		[Column(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_SerialKey", DbType="VarChar(255)")]
		public string SerialKey
		{
			get
			{
				return this._SerialKey;
			}
			set
			{
				if ((this._SerialKey != value))
				{
					this.OnSerialKeyChanging(value);
					this.SendPropertyChanging();
					this._SerialKey = value;
					this.SendPropertyChanged("SerialKey");
					this.OnSerialKeyChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="VarChar(255)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(255)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_IsResident", DbType="Bit NOT NULL")]
		public bool IsResident
		{
			get
			{
				return this._IsResident;
			}
			set
			{
				if ((this._IsResident != value))
				{
					this.OnIsResidentChanging(value);
					this.SendPropertyChanging();
					this._IsResident = value;
					this.SendPropertyChanged("IsResident");
					this.OnIsResidentChanged();
				}
			}
		}
		
		[Column(Storage="_ResidencyYear", DbType="Int")]
		public System.Nullable<int> ResidencyYear
		{
			get
			{
				return this._ResidencyYear;
			}
			set
			{
				if ((this._ResidencyYear != value))
				{
					this.OnResidencyYearChanging(value);
					this.SendPropertyChanging();
					this._ResidencyYear = value;
					this.SendPropertyChanged("ResidencyYear");
					this.OnResidencyYearChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_LastLoggedIn", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLoggedIn
		{
			get
			{
				return this._LastLoggedIn;
			}
			set
			{
				if ((this._LastLoggedIn != value))
				{
					this.OnLastLoggedInChanging(value);
					this.SendPropertyChanging();
					this._LastLoggedIn = value;
					this.SendPropertyChanged("LastLoggedIn");
					this.OnLastLoggedInChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_ActivationKey", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ActivationKey
		{
			get
			{
				return this._ActivationKey;
			}
			set
			{
				if ((this._ActivationKey != value))
				{
					this.OnActivationKeyChanging(value);
					this.SendPropertyChanging();
					this._ActivationKey = value;
					this.SendPropertyChanged("ActivationKey");
					this.OnActivationKeyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
